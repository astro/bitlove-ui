$newline always
<section class="col">
  <h2>API</h2>

  <h3>Contents
  <ul .toc>
    <li>
      <a href="#crawling">Crawling the site
    <li>
      <a href="#by-enclosure">Torrent data by enclosure URL
    <li>
      <a href="#by-guid">Torrent data by GUID
    <li>
      <a href="#feed-lookup">Feed lookup by URL
  
  <h3 #crawling>Crawling the site</h3>
  <p>
    We try to put all publicly available data back #
    into feeds and OPML resources. That way you can reuse #
    standard software. You may #
    <a href="https://github.com/astro/bitlove-ui/issues">create an issue</a> if you need more functionality.

  <h3 #by-enclosure>Torrent data by enclosure URL
  <p>
    Obtain torrent (and source) information by URL #
    of the original podcast files. The endpoint allows multiple URLs #
    to be processed at once. They query key must start with #
    <code>url
    \ and you should URL-escape the values for safety.
  <pre>#{by_enclosure_example}
  <p>
    This API is #
    <a href="http://enable-cors.org/">CORS-enabled
    \ and in actual use by the widgets.

  <h3 #by-guid>Torrent data by GUID
  <p>
    Are your file URLs non-predictable? Starting January 2015 you may tag like that:
  <pre>#{by_guid_source}
  <p>
    If you don't provide per-enclosure GUIDs we'll just use RSS'
    <code>&lt;guid/&gt;
    or ATOM's
    <code>&lt;id/&gt;
    . Please be aware that this mechanism follows the definition of user-supplied input very closely. Anyone could lookup your GUIDs and put them in their own Bitlove-fed feeds.
  <p>
    Use by replacing
    <code>url=
    with
    <code>guid=
    in the API call.

  <h3 #feed-lookup>Feed lookup by URL
  <p>
    Discover the URL of public feeds with their enclosures mapped to torrents:
  <pre>#{feed_lookup_example}
